#!/usr/bin/python3 -B
"""
Converts f-numbers into micro-four-thirds APEX values and vice versa.
"""

from __future__ import print_function

import sys                     # built-in library
import numpy as np             # pip install numpy
import argv                    # local import: argv.py

F_NUMBER_TO_APEX = [
    0x000, 0x046, 0x086, 0x0c1, 0x0f8, 0x12b, 0x15b, 0x187, 0x1b2, 0x1da,   # F1.0
    0x200, 0x224, 0x246, 0x267, 0x286, 0x2a4, 0x2c1, 0x2dd, 0x2f8, 0x312,   # F2.0
    0x32b, 0x343, 0x35b, 0x371, 0x387, 0x39d, 0x3b2, 0x3c6, 0x3da, 0x3ed,
    0x400, 0x412, 0x424, 0x435, 0x446, 0x457, 0x467, 0x477, 0x486, 0x495,   # F4.0
    0x4a4, 0x4b3, 0x4c1, 0x4cf, 0x4dd, 0x4eb, 0x4f8, 0x505, 0x512, 0x51f,
    0x52b, 0x537, 0x543, 0x54f, 0x55b, 0x566, 0x571, 0x57d, 0x587, 0x592,
    0x59d, 0x5a7, 0x5b2, 0x5bc, 0x5c6, 0x5d0, 0x5da, 0x5e3, 0x5ed, 0x5f6,
    0x600, 0x609, 0x612, 0x61b, 0x624, 0x62c, 0x635, 0x63d, 0x646, 0x64e,   # F8.0
    0x657, 0x65f, 0x667, 0x66f, 0x677, 0x67e, 0x686, 0x68e, 0x695, 0x69d,
    0x6a4, 0x6ac, 0x6b3, 0x6ba, 0x6c1, 0x6c8, 0x6cf, 0x6d6, 0x6dd, 0x6e4,
    0x6eb, 0x6f1, 0x6f8, 0x6ff, 0x705, 0x70c, 0x712, 0x718, 0x71f, 0x725,
    0x72b, 0x731, 0x737, 0x73d, 0x743, 0x749, 0x74f, 0x755, 0x75b, 0x760,
    0x766, 0x76c, 0x771, 0x777, 0x77d, 0x782, 0x787, 0x78d, 0x792, 0x798,
    0x79d, 0x7a2, 0x7a7, 0x7ad, 0x7b2, 0x7b7, 0x7bc, 0x7c1, 0x7c6, 0x7cb,
    0x7d0, 0x7d5, 0x7da, 0x7de, 0x7e3, 0x7e8, 0x7ed, 0x7f2, 0x7f6, 0x7fb,
    0x800, 0x804, 0x809, 0x80d, 0x812, 0x816, 0x81b, 0x81f, 0x824, 0x828,   # F16.0
    0x82c, 0x831, 0x835, 0x839, 0x83d, 0x842, 0x846, 0x84a, 0x84e, 0x852,
    0x857, 0x85b, 0x85f, 0x863, 0x867, 0x86b, 0x86f, 0x873, 0x877, 0x87b,
    0x87e, 0x882, 0x886, 0x88a, 0x88e, 0x892, 0x895, 0x899, 0x89d, 0x8a1,
    0x8a4, 0x8a8, 0x8ac, 0x8af, 0x8b3, 0x8b7, 0x8ba, 0x8be, 0x8c1, 0x8c5,
    0x8c8, 0x8cc, 0x8cf, 0x8d3, 0x8d6, 0x8da, 0x8dd, 0x8e1, 0x8e4, 0x8e7,
    0x8eb, 0x8ee, 0x8f1, 0x8f5, 0x8f8, 0x8fb, 0x8ff, 0x902, 0x905, 0x908,   # F22.0
    0x90c, 0x90f, 0x912, 0x915, 0x918, 0x91b, 0x91f, 0x922, 0x925, 0x928,
    0x92b, 0x92e, 0x931, 0x934, 0x937, 0x93a, 0x93d, 0x940, 0x943, 0x946,   # F24.0
    0x949, 0x94c, 0x94f, 0x952, 0x955, 0xffff]                              # F25.4

def main():
    fnum = argv.floatval("--f", default=None)
    apex = argv.intval("--apex", default=None)
    show_help = argv.exists("--help")
    missing_or_both = (fnum is None) ==  (apex is None)
    argv.exitIfAnyUnparsedOptions()

    if show_help or missing_or_both:
        print("Usage: fnum2apex [option]")
        print()
        print("  options:")
        print("    --f F                   lens aperture as an f-number; default = None")
        print("    --apex N                micro-4/3 apex value as an integer; default = None")
        print("    --help                  show this help message")
        print()
        print("  examples:")
        print("    fnum --f 4.0")
        print("    fnum --apex 1024")
        print()
        print("  Converts the given f-number to the corresponding micro-four-thirds APEX value,")
        print("  or vice versa.")
        sys.exit(-1)

    if fnum is not None:
        fnum_idx = int(fnum * 10) - 10
        apexval = F_NUMBER_TO_APEX[fnum_idx]
        print("f/%.1f => 0x%04x (%d)"%(fnum, apexval, apexval))

    if apex is not None:
        deltas = np.abs(apex - np.array(F_NUMBER_TO_APEX))
        apex_idx = np.argmin(deltas)
        fnum = (apex_idx + 10) / 10.0
        print("0x%04x (%d) => f/%.1f"%(apex, apex, fnum))

if __name__ == "__main__":
    main()
